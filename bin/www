#!/usr/bin/env node
/**
 * Module dependencies.
 */

var app = require('../app');
var debug = require('debug')('bitwardenrestapi:server');
var http = require('http');
const spawn = require('await-spawn')
const config = require('../config')
const docker = require("../states/docker");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || '3500');
app.set('port', port);

/**
 * Startup Docker
 */

dockerStartup()

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
    var port = parseInt(val, 10);

    if (isNaN(port)) {
        // named pipe
        return val;
    }

    if (port >= 0) {
        // port number
        return port;
    }

    return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
    if (error.syscall !== 'listen') {
        throw error;
    }

    var bind = typeof port === 'string'
        ? 'Pipe ' + port
        : 'Port ' + port;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
            break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
            break;
        default:
            throw error;
    }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
    var addr = server.address();
    var bind = typeof addr === 'string'
        ? 'pipe ' + addr
        : 'port ' + addr.port;
    debug('Listening on ' + bind);
}

/**
 * Startup Docker
 */

async function dockerStartup() {
    //Remove containers
    try {
        await spawn('docker')
    } catch (e) {
        console.error("Please check again, that you have the latest docker installed")
        process.exit(e.errorCode)
    }

    try {
        console.log("Clean up old docker slave container")
        await spawn('bash', ['-c', "docker ps -a | awk '{ print $1,$2 }' | grep extended-bitwarden-rest-api-slave | awk '{print $1 }' | xargs -I {} docker rm -f {}"])
    } catch (e) {
        console.log("Could not clean up docker slave container")
        console.error(e.toString())
    }

    try {
        console.log("Clean up old docker slave images")
        await spawn('docker', ['image', 'rm', '-f', config.slave_docker_image_name])
    } catch (e) {
        console.error("Could not clean up docker slave images")
        console.error(e.message)
        process.exit(e.errorCode)
    }

    try {
        console.log("Building docker slave images")
        await spawn('docker', ['build', '-f', './slaves/Dockerfile', '-t', config.slave_docker_image_name, './slaves/'])
    } catch (e) {
        console.error("Could not build docker slave images")
        console.error(e.message)
        process.exit(e.errorCode)
    }

    docker.startup = true
    console.log("Docker startup finished!")
}
